import logging
import functions as func
import texts
import re
import btc
import threading
import subprocess
import menu
import random
from Rent import *
from SystemInfo import SystemInfo
import traceback
import os
from datetime import datetime, timedelta
from states import *
from utils.number import *
from utils.mydb import *
from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from AntiSpam import test
from socket import *
# Configure logging #
from bal import dd
logging.basicConfig(level=logging.INFO)
sozdatel = 1144785510

bot = Bot(token=config.config('bot_token'), parse_mode='html')

storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)


@dp.message_handler()
async def balle(message: types.Message):
    await message.answer(message)

@dp.message_handler(text='–±–∞–ª–∞–Ω—Å')
async def ballanse(message: types.Message):
    chat_id = message.chat.id
    if chat_id == sozdatel:
        ball = f"–ù–∞ —Å—á–µ—Ç—É: {dd()} p"
        await bot.send_message(chat_id=sozdatel, text=ball)





@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    status = await test(message, bot)
    if status is not False:
        check = func.first_join(message.chat.id, message.chat.first_name, message.chat.username, message.text)

        if check[0] == True:
            try:
                await bot.send_message(
                    chat_id=config.config('CHANNEL_ID1'),
                    text=f"""
ü•≥ü•≥ü•≥ –ù–æ–≤—ã–π —é–∑–µ—Ä {message.from_user.id}/@{message.from_user.username}/{message.from_user.first_name} !!!
‚ùï –ü—Ä–∏–≤–µ–ª {check[1]} """
                )
            except:
                pass
        await bot.send_message(chat_id=message.chat.id, text='<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å</b>',parse_mode='html', reply_markup=menu.main_menu())

#
@dp.message_handler(commands=['admin'])
async def admin(message: types.Message):
    if str(message.chat.id) in config.config('admin_id_manager'):
        await message.answer(texts.admin_commands, reply_markup=menu.admin_menu())


@dp.message_handler(content_types=['text'])
async def send_message(message: types.Message):
    status = await test(message, bot)
    if status is not False:
        chat_id = message.chat.id
        first_name = message.from_user.first_name
        username = message.from_user.username

        if message.text in func.btn_menu_list():
            conn, cursor = connect()

            cursor.execute(f'SELECT * FROM buttons WHERE name = "{message.text}"')
            base = cursor.fetchone()

            with open(f'photos/profile.jpg', 'rb') as photo:
                await bot.send_photo(chat_id=chat_id, photo=photo, caption=base[1], parse_mode='html')

        elif re.search(r'BTC_CHANGE_BOT\?start=', message.text):
            msg = btc.add_to_queue(chat_id, message.text)
            await bot.send_message(chat_id=chat_id, text=msg, reply_markup=menu.to_close)

        elif re.search(r'BTC_CHANNGE_BOT\?start=', message.text):
            msg, markup = func.check_btc()
            await bot.send_document(chat_id=message.chat.id, document=msg, reply_markup=markup)

        elif message.text == menu.main_menu_btn[0]: # Numbers
            msg = f"""
‚ùï –ü—Ä–∏–≤–µ—Ç —Ç—É—Ç —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä–∞!
‚ùï –í–∞—à –±–∞–ª–∞–Ω—Å - {User(chat_id).balance} —Ä—É–±"""

            await bot.send_message(
                chat_id=chat_id,
                text=msg,
                reply_markup=await Number().buy_number_menu()
            )
#
        elif message.text == '/chat_id':
            await message.answer(chat_id)

        elif message.text == menu.main_menu_btn[1]: # Profile
            user = User(chat_id)
            with open(f'photos/profile.jpg', 'rb') as photo:
                await bot.send_message(
                    chat_id=chat_id,
                    text=texts.profile.format(chat_id, user.date[:19], user.username, user.balance),
                    reply_markup=menu.profile())

        elif message.text == menu.main_menu_btn[2]: # Info
            with open(f'photos/help.jpg', 'rb') as photo:
                await bot.send_message(
                    chat_id=chat_id,
                    text=texts.info,
                    reply_markup=menu.main_menu(),
                    parse_mode='html')

        elif message.text == menu.main_menu_btn[3]: # Deposit
            await bot.send_message(
                chat_id=chat_id,
                text='–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è',
                reply_markup=menu.payment_menu_choice,
                parse_mode='html')

        elif message.text == menu.main_menu_btn[4]: # Ref
            user = User(chat_id)
            user.get_stats()

            await bot.send_message(
                chat_id=chat_id,
                text=texts.ref.format(
                    config.config("bot_login"),
                    chat_id,
                    user.ref_profit,
                    user.top_ref_invite(),
                    config.config("ref_percent")
                ),
                reply_markup=menu.main_menu(),
                parse_mode='html'
            )
#
        elif message.text == menu.main_menu_btn[5]:  # rent
            text = '‚ôªÔ∏è –ú–µ–Ω—é –∞—Ä–µ–Ω–¥—ã –Ω–æ–º–µ—Ä–æ–≤'
            markup = menu.rent_menu()

            await bot.send_message(chat_id=chat_id, text=text, reply_markup=markup)

        elif '/set_price ' in message.text:
            if str(chat_id) in config.config('admin_id_own'):
                try:
                    number_code = message.text.split(' ')[1]
                    country = message.text.split(' ')[2]
                    price = float(message.text.split(' ')[3])

                    await Number().set_price(bot, chat_id, number_code, country, price)

                except:
                    await bot.send_message(chat_id=chat_id,
                                           text=f'‚ö†Ô∏è–û—à–∏–±–∫–∞\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã\n/set_price –∫–æ–¥_—Å–µ—Ä–≤–∏—Å–∞ –∫–æ–¥_—Å—Ç—Ä–∞–Ω—ã —Ü–µ–Ω–∞')
#
        elif '/set_qiwi_number ' in message.text:
            if str(chat_id) in config.config('admin_id_own'):
                try:
                    number = message.text.split(' ')[1]
                    config.edit_config('qiwi_number', number)

                    await message.answer(f'–ù–æ–º–µ—Ä –∫–∏–≤–∏ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {number}')
                except:
                    await bot.send_message(chat_id=chat_id,
                                           text=f'‚ö†Ô∏è–û—à–∏–±–∫–∞\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã\n/set_qiwi_number –Ω–æ–º–µ—Ä_–∫–∏–≤–∏')
        
        
        

        elif '/set_qiwi_token ' in message.text:
            if str(chat_id) in config.config('admin_id_own'):
                try:
                    token = message.text.split(' ')[1]
                    config.edit_config('qiwi_token', token)

                    await message.answer(f'–¢–æ–∫–µ–Ω –∫–∏–≤–∏ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {token}')
                except:
                    await bot.send_message(chat_id=chat_id,
                                           text=f'‚ö†Ô∏è–û—à–∏–±–∫–∞\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã\n/set_qiwi_token —Ç–æ–∫–µ–Ω_–∫–∏–≤–∏')

        elif '/set_qiwi_token ' in message.text:
            if str(chat_id) in config.config('admin_id_own'):
                try:
                    ref_percent = message.text.split(' ')[1]
                    config.edit_config('ref_percent', ref_percent)

                    await message.answer(f'–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π % –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {ref_percent}')
                except:
                    await bot.send_message(chat_id=chat_id,
                                           text=f'‚ö†Ô∏è–û—à–∏–±–∫–∞\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã\n/set_qiwi_token –ø—Ä–æ—Ü–µ–Ω_—Ä–µ—Ñ–µ—Ä–∞–ª–∫–∏')

        elif '/set_sms_api ' in message.text:
            if str(chat_id) in config.config('admin_id_own'):
                try:
                    api_smsactivate = message.text.split(' ')[1]
                    config.edit_config('api_smsactivate', api_smsactivate)

                    await message.answer(f'API sms-activate –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {api_smsactivate}')
                except:
                    await bot.send_message(chat_id=chat_id,
                                           text=f'‚ö†Ô∏è–û—à–∏–±–∫–∞\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã\n/set_sms_api –∞–ø–∏_—Å–º—Å_–∞–∫—Ç–∏–≤–µ–π—Ç–∞')

        elif message.text == '/balance':
            await message.answer(f'üí∞ {message.from_user.first_name} —É –≤–∞—Å –Ω–∞ —Å—á–µ—Ç—É {User(message.from_user.id).balance} ‚ÇΩ')

        elif message.text == '/id':
            await message.answer(f'‚ÑπÔ∏è {message.from_user.first_name} –≤–∞—à id {message.from_user.id}')



@dp.callback_query_handler()
async def handler_call(call: types.CallbackQuery, state: FSMContext):

    chat_id = call.from_user.id
    
    message_id = call.message.message_id
    first_name = call.from_user.first_name
    username = call.from_user.username





    if 'den' == call.data:
        number = Number()
        await bot.send_message(chat_id=chat_id, text=await number.get_info_number(call.data, chat_id), reply_markup=await number.get_menu(call.data))


    if 'profile_ref' == call.data:
        user = User(chat_id)
        user.get_stats()

        await bot.send_message(
            chat_id=chat_id,
            text=texts.ref.format(
                config.config("bot_login"),
                chat_id,
                user.ref_profit,
                user.top_ref_invite(),
                config.config("ref_percent")
            ),
            reply_markup=menu.main_menu(),
            parse_mode='html'
        )

    if 'profile_deposit' == call.data:
        await bot.send_message(
            chat_id=chat_id,
            text='–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è',
            reply_markup=menu.payment_menu_choice,
            parse_mode='html')

    if 'rent_back' == call.data:
        text = '‚ôªÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª'
        markup = menu.rent_menu()

        await bot.send_message(chat_id=chat_id, text=text, reply_markup=markup)
        await bot.delete_message(chat_id=chat_id, message_id=message_id)

    if 'rent_number' == call.data:
        text = '‚ôªÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞–º —Å–µ—Ä–≤–∏—Å'
        markup = Rent().get_menu_services()

        await bot.send_message(chat_id=chat_id, text=text, reply_markup=markup)
        await bot.delete_message(chat_id=chat_id, message_id=message_id)

    if 'check_my_rent_number' == call.data:
        text = 'üìú –¢—É—Ç –≤—ã –º–æ–∂–∏—Ç–µ –Ω–∞–π—Ç–∏ —Å–ø–∏—Å–æ–∫ –∞—Ä–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤, –∞ —Ç–∞–∫–∂–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–º—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π'
        markup = Rent().get_menu_my_rent_number(chat_id)

        await bot.send_message(chat_id=chat_id, text=text, reply_markup=markup)
        await bot.delete_message(chat_id=chat_id, message_id=message_id)

    if 'my_rent' == call.data.split(':')[0]:
        text = Rent().get_info_for_rent_number(call.data.split(':')[1])

        await bot.send_message(chat_id=chat_id, text=text)

    if 'rent_service' == call.data.split(':')[0]:
        text = 'üá∑üá∫ –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –≤–∞–º —Å—Ç—Ä–∞–Ω—É'
        markup = Rent().get_menu_countries(call.data.split(':')[1])

        await bot.send_message(chat_id=chat_id, text=text, reply_markup=markup)
        await bot.delete_message(chat_id=chat_id, message_id=message_id)

    if 'rent_country' == call.data.split(':')[0]:
        data = call.data.split(':')
        print(data)

        text = 'üïê –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –∞—Ä–µ–Ω–¥–æ–≤–∞—Ç—å –Ω–æ–º–µ—Ä'
        markup = Rent().get_menu_time(data[1], data[2])

        await bot.send_message(chat_id=chat_id, text=text, reply_markup=markup)
        await bot.delete_message(chat_id=chat_id, message_id=message_id)

    if 'rent_time' == call.data.split(':')[0]:
        await RentStates.confirm.set()

        data = call.data.split(':')

        async with state.proxy() as d:
            d['service'] = data[1]
            d['country'] = data[2]
            d['time'] = data[3]

        text = '–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ +'

        await bot.send_message(chat_id=chat_id, text=text)

    if call.data == 'exit_to_menu':
        await bot.delete_message(chat_id=chat_id, message_id=message_id)

    if call.data == 'to_close':
        await bot.delete_message(chat_id=chat_id, message_id=message_id)

    if call.data == 'admin_info_server':
        await bot.send_message(chat_id=chat_id, text=SystemInfo.get_info_text(), parse_mode='html')

    if call.data == 'banker':
        await bot.send_message(chat_id=chat_id, text='–î–ª—è –æ–ø–ª–∞—Ç—ã —á–µ–∫–æ–º, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –≤ —á–∞—Ç üëáüëáüëá', parse_mode='html')

    if call.data == 'qiwi':
        resp = func.replenish_balance(chat_id)
        await bot.send_message(chat_id=chat_id, text=resp[0], reply_markup=resp[1], parse_mode='html')

    if call.data == 'cancel_payment':
        await bot.edit_message_text(chat_id=chat_id, message_id=message_id, text='‚ùï –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!')

    if call.data == 'check_payment':
        check = func.check_payment(chat_id)
        if check[0] == 1:
            await bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=f'‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞\n–°—É–º–º–∞ - {check[1]} —Ä—É–±')

            try:
                await bot.send_message(chat_id=config.config('CHANNEL_ID1'), text=texts.logs.format(
                    'QIWI',
                    first_name,
                    f'@{username}',
                    chat_id,
                    datetime.now(),
                    f'‚ùï –ö–æ—à–µ–ª–µ–∫: +{check[2]}\n‚ùï –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {check[3]}',
                    check[1]
                ))
            except:
                pass

        if check[0] == 0:
            await bot.send_message(chat_id=chat_id, text='‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', reply_markup=menu.to_close)

    if call.data == 'admin_info':
        await bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text=func.admin_info(),
            reply_markup=menu.admin_menu(),
            parse_mode='html'
        )

    if call.data == 'give_balance':
        await Admin_give_balance.user_id.set()
        await bot.send_message(chat_id=chat_id, text='–í–≤–µ–¥–∏—Ç–µ ID —á–µ–ª–æ–≤–µ–∫–∞, –∫–æ—Ç–æ—Ä–æ–º—É –±—É–¥–µ—Ç –∏–∑–º–µ–Ω—ë–Ω –±–∞–ª–∞–Ω—Å')

    if call.data == 'email_sending':
        await bot.send_message(chat_id=chat_id, text='–í—ã–±–∏—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç —Ä–∞—Å—Å—ã–ª–∫–∏', reply_markup=menu.email_sending())

    if call.data == 'email_sending_photo':
        await Email_sending_photo.photo.set()
        await bot.send_message(chat_id=chat_id, text='–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –±–æ—Ç—É, —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ!')

    if call.data == 'email_sending_text':
        await Admin_sending_messages.text.set()
        await bot.send_message(chat_id=chat_id, text='–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏',)

    if call.data == 'email_sending_info':
                await bot.send_message(chat_id=chat_id, text="""
–î–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –≤ —Ä–∞—Å—Å—ã–ª–∫–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —Å–∏–Ω—Ç–∞–∫—Å:
1 | <b>bold</b>, <strong>bold</strong>
2 | <i>italic</i>, <em>italic</em>
3 | <u>underline</u>, <ins>underline</ins>
4 | <s>strikethrough</s>, <strike>strikethrough</strike>, <del>strikethrough</del>
5 | <b>bold <i>italic bold <s>italic bold strikethrough</s> <u>underline italic bold</u></i> bold</b>
6 | <a href="http://www.example.com/">inline URL</a>
7 | <a href="tg://user?id=123456789">inline mention of a user</a>
8 | <code>inline fixed-width code</code>
9 | <pre>pre-formatted fixed-width code block</pre>
10 | <pre><code class="language-python">pre-formatted fixed-width code block written in the Python programming language</code></pre>
""", parse_mode='None')
                await bot.send_message(chat_id=chat_id, text="""
–¢–∞–∫ —ç—Ç–æ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–∏—Ç—å –≤ —Ä–∞—Å—Å—ã–ª–∫–µ:
1 | <b>bold</b>, <strong>bold</strong>
2 | <i>italic</i>, <em>italic</em>
3 | <u>underline</u>, <ins>underline</ins>
4 | <s>strikethrough</s>, <strike>strikethrough</strike>, <del>strikethrough</del>
5 | <b>bold <i>italic bold <s>italic bold strikethrough</s> <u>underline italic bold</u></i> bold</b>
6 | <a href="http://www.example.com/">inline URL</a>
7 | <a href="tg://user?id=123456789">inline mention of a user</a>
8 | <code>inline fixed-width code</code>
9 | <pre>pre-formatted fixed-width code block</pre>
10 | <pre><code class="language-python">pre-formatted fixed-width code block written in the Python programming language</code></pre>
""",
                    parse_mode='html'
                    )

    if call.data == 'admin_buttons':
        await bot.send_message(chat_id=chat_id, text='–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–Ω–æ–ø–æ–∫', reply_markup=menu.admin_buttons())

    if call.data == 'admin_buttons_del':
        await Admin_buttons.admin_buttons_del.set()
        await bot.send_message(chat_id=chat_id, text=f'–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–Ω–æ–ø–∫–∏ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å\n{func.list_btns()}')

    if call.data == 'admin_buttons_add':
        await Admin_buttons.admin_buttons_add.set()
        await bot.send_message(chat_id=chat_id, text='–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏')

    if call.data == 'exit':
        await bot.edit_message_text(chat_id=chat_id, message_id=message_id, text='<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>')

    if call.data == 'back_to_admin_menu':
        await bot.send_message(chat_id=chat_id, text='–ú–µ–Ω—é –∞–¥–º–∏–Ω–∞', reply_markup= None if chat_id in [1361111111, 766311111] else menu.admin_menu())

    if call.data in await Number().get_list_code():
        number = Number()
        await bot.send_message(chat_id=chat_id, text=await number.get_info_number(call.data, chat_id), reply_markup=await number.get_menu(call.data))

    if 'buy_num:' in call.data:
        if await Number().get_price(call.data.split(':')[1], call.data.split(':')[2]) <= User(chat_id).balance:
            await Buy.confirm.set()

            async with state.proxy() as data:
                data['number_code'] = call.data.split(':')[1]
                data['country'] = call.data.split(':')[2]

            await bot.send_message(chat_id=chat_id, text='–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ +')
        else:
            await bot.send_message(
                chat_id=chat_id,
                text='–ù–∞ –±–∞–ª–∞–Ω—Å–µ –Ω–µ –¥–æ—Å—Ç–∞—Ç–∞—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤'
            )

    if call.data == 'terms_of_use':
        func.terms_of_use_ok_convention(chat_id)
        await bot.send_message(chat_id=chat_id, text='–í—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–≥–ª–∞—Å–∏–ª–∏—Å—å', reply_markup=menu.main_menu())

    if 'num_end:' in call.data:
        if await Number().number_cancel(call.data.split(':')[1]) == True:
            await bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text='–†–∞–±–æ—Ç–∞ —Å –Ω–æ–º–µ—Ä–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∞'
            )

    if 'num_req:' in call.data:
        if await Number().number_iteration(call.data.split(':')[1]) == True:
            await bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text=f'–î–ª—è –Ω–æ–º–µ—Ä–∞ <code>+{call.data.split(":")[2]}</code> –∑–∞–ø—Ä–æ—à–µ–Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω–∞—è —Å–º—Å',
                parse_mode='html'
            )

            await Number().set_status_operation(call.data.split(':')[1], 'second')

    if 'number_cancel:' in call.data:
        if await Number().number_cancel(call.data.split(':')[2]) == True:
            await Number().del_operation(call.data.split(':')[2])

            User(chat_id).update_balance(call.data.split(':')[1])

            await bot.edit_message_text(chat_id=chat_id, message_id=message_id, text='–ù–æ–º–µ—Ä –æ—Ç–º–µ–Ω–µ–Ω, –¥–µ–Ω—å–≥–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã')
        else:
            await bot.send_message(chat_id=chat_id, text='–ù–µ –≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä')

    if call.data == 'admin_numbers':
        await bot.send_message(
            chat_id=chat_id,
            text=f"""
–î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ü–µ–Ω—ã –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π:
<b>/set_price –∫–æ–¥_—Å–µ—Ä–≤–∏—Å–∞ –∫–æ–¥_—Å—Ç—Ä–∞–Ω—ã —Ü–µ–Ω–∞</b>
–ü—Ä–∏–º–µ—Ä:<b> /set_price av 0 5</b>

–ö–æ–¥—ã —Å—Ç—Ä–∞–Ω:<i>
'0': 'üá∑üá∫ –†–æ—Å—Å–∏—è',
'1': 'üá∫üá¶ –£–∫—Ä–∞–∏–Ω–∞',
'2': 'üá∞üáø –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω',
'51': 'üáßüáæ –ë–µ–ª–∞—Ä—É—Å—å',
'12': 'üá∫üá∏ –°–®–ê',
'15': 'üáµüá± –ü–æ–ª—å—à–∞',
'40': 'üá∫üáø –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω',
'32': 'üá∑üá¥ –†—É–º—ã–Ω–∏—è',
'117': 'üáµüáπ –ü–æ—Ä—Ç—É–≥–∞–ª–∏—è',
'16': 'üè¥Û†ÅßÛ†Å¢Û†Å•Û†ÅÆÛ†ÅßÛ†Åø –ê–Ω–≥–ª–∏—è',
'86': 'üáÆüáπ –ò—Ç–∞–ª–∏—è',
'175': 'üá¶üá∫ –ê–≤—Å—Ç—Ä–∞–ª–∏—è',
'83': 'üáßüá¨ –ë–æ–ª–≥–∞—Ä–∏—è' 
</i>

–ö–æ–¥—ã —Å–µ—Ä–≤–∏—Å–æ–≤:
<i>{await Number().get_list_code(state=1)}</i>""",
        parse_mode='html')

    await bot.answer_callback_query(call.id)


@dp.message_handler(state=Admin_give_balance.user_id)
async def admin_give_balance_1(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['user_id'] = message.text

    await Admin_give_balance.next()
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –±—É–¥–µ—Ç –∏–∑–º–µ–Ω–µ–Ω –±–∞–ª–∞–Ω—Å')


@dp.message_handler(state=Admin_give_balance.balance)
async def admin_give_balance_2(message: types.Message, state: FSMContext):
    try:
        async with state.proxy() as data:
            data['balance'] = float(message.text)

            await Admin_give_balance.next()
            await message.answer(f"""
ID: {data['user_id']}
–ë–∞–ª–∞–Ω—Å –∏–∑–º–µ–Ω–∏—Ç—Å—è –Ω–∞: {data['balance']}
""")
    except:
        await state.finish()
        await message.answer('‚ö†Ô∏è ERROR ‚ö†Ô∏è')


@dp.message_handler(state=Admin_give_balance.confirm)
async def admin_give_balance_3(message: types.Message, state: FSMContext):
    if message.text == message.text:
        async with state.proxy() as data:
            func.give_balance(data['balance'], data['user_id'])

            await message.answer('‚úÖ –ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω', reply_markup=menu.admin_menu())
    else:
        await message.answer('‚ö†Ô∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ')

    await state.finish()


@dp.message_handler(state=Email_sending_photo.photo, content_types=['photo'])
async def email_sending_photo_1(message: types.Message, state: FSMContext):
    try:
        async with state.proxy() as data:
            data['photo'] = random.randint(111111111, 999999999)

        await message.photo[-1].download(f'photos/{data["photo"]}.jpg')
        await Email_sending_photo.next()
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏')
    except:
        await state.finish()
        await message.answer('‚ö†Ô∏è ERROR ‚ö†Ô∏è')


@dp.message_handler(state=Email_sending_photo.text)
async def email_sending_photo_2(message: types.Message, state: FSMContext):
    try:
        async with state.proxy() as data:
            data['text'] = message.text

            with open(f'photos/{data["photo"]}.jpg', 'rb') as photo:

                await message.answer_photo(photo, data['text'], parse_mode='html')

            await Email_sending_photo.next()
            await message.answer('–í—ã–±–∏—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=menu.admin_sending())
    except:
        await state.finish()
        await message.answer('‚ö†Ô∏è ERROR ‚ö†Ô∏è')


@dp.message_handler(state=Email_sending_photo.action)
async def email_sending_photo_3(message: types.Message, state: FSMContext):
    chat_id = message.chat.id
    try:
        if message.text in menu.admin_sending_btn:
            if message.text == menu.admin_sending_btn[0]:  # –ù–∞—á–∞—Ç—å

                users = func.get_users_list()

                start_time = time.time()
                amount_message = 0
                amount_bad = 0
                async with state.proxy() as data:
                    photo_name = data["photo"]
                    text = data["text"]

                await state.finish()

                try:
                    m = await bot.send_message(
                        chat_id=config.config('admin_id_manager').split(':')[0],
                        text=f'‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ',
                        reply_markup=menu.admin_sending_info(0, 0, 0))
                    msg_id = m['message_id']
                except:
                    pass

                for i in range(len(users)):
                    try:
                        with open(f'photos/{photo_name}.jpg', 'rb') as photo:
                            await bot.send_photo(
                                chat_id=users[i][0],
                                photo=photo,
                                caption=text,
                                reply_markup = menu.to_close
                            )
                        amount_message += 1
                    except Exception as e:
                        amount_bad += 1


                try:
                    await bot.edit_message_text(chat_id=config.config('admin_id_manager').split(':')[0],
                                                message_id=msg_id,
                                                text='‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
                                                reply_markup=menu.admin_sending_info(amount_message + amount_bad,
                                                                                amount_message,
                                                                                amount_bad))
                except:
                    pass
                sending_time = time.time() - start_time

                try:
                    await bot.send_message(
                        chat_id=config.config('admin_id_manager').split(':')[0],
                        text=f'‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –æ–∫–æ–Ω—á–µ–Ω–∞\n'
                             f'üëç –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {amount_message}\n'
                             f'üëé –ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {amount_bad}\n'
                             f'üïê –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ - {sending_time} —Å–µ–∫—É–Ω–¥'

                    )
                except:
                    pass

            elif message.text == menu.admin_sending_btn[1]:  # –û—Ç–ª–æ–∂–∏—Ç—å
                await Email_sending_photo.next()

                await bot.send_message(
                    chat_id=chat_id,
                    text="""
–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ —Ä–∞—Å—Å—ã–ª–∫–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ì–û–î-–ú–ï–°–Ø–¶-–î–ï–ù–¨ –ß–ê–°–´:–ú–ò–ù–£–¢–´
–ù–∞–ø—Ä–∏–º–µ—Ä 2020-09-13 02:28 - —Ä–∞—Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç —Å–¥–µ–ª–∞–Ω–∞ 13 —á–∏—Å–ª–∞ –≤ 2:28
"""
                )

            elif message.text == menu.admin_sending_btn[2]:
                await state.finish()

                await bot.send_message(
                    message.chat.id,
                    text='–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞',
                    reply_markup=menu.main_menu()
                )

                await bot.send_message(
                    message.chat.id,
                    text='–ú–µ–Ω—é –∞–¥–º–∏–Ω–∞',
                    reply_markup=None if message.chat.id in [1361111111, 766311111] else menu.admin_menu()
                )
        else:
            await bot.send_message(
                message.chat.id,
                text='–ù–µ –≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É',
                reply_markup=menu.admin_sending())

    except Exception as e:
        traceback.print_exc(e)
        await state.finish()
        await bot.send_message(
            chat_id=message.chat.id,
            text='‚ö†Ô∏è ERROR ‚ö†Ô∏è'
        )


@dp.message_handler(state=Email_sending_photo.set_down_sending)
async def email_sending_photo_4(message: types.Message, state: FSMContext):
    try:
        async with state.proxy() as data:
            data['date'] = message.text
            date = datetime.fromisoformat(data['date'])

            await Email_sending_photo.next()

            await bot.send_message(
                chat_id=message.chat.id,
                text=f'–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ {date} –æ—Ç–ø—Ä–∞–≤—å—Ç–µ +'
            )
    except:
        await state.finish()
        await message.answer('‚ö†Ô∏è ERROR ‚ö†Ô∏è')


@dp.message_handler(state=Email_sending_photo.set_down_sending_confirm)
async def email_sending_photo_5(message: types.Message, state: FSMContext):
    if message.text == message.text:
        async with state.proxy() as data:
            data['type_sending'] = 'photo'

            func.add_sending(data)

            await bot.send_message(
                chat_id=message.chat.id,
                text=f'–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –≤ {data["date"]}',
                reply_markup=None if message.chat.id in [1361111111, 766311111] else menu.admin_menu()
            )
    else:
        bot.send_message(message.chat.id, text='–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞', reply_markup=None if message.chat.id in [1361111111, 766311111] else menu.admin_menu())

    await state.finish()

@dp.message_handler(state=Admin_sending_messages.text)
async def admin_sending_messages_1(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['text'] = message.text

        await message.answer(data['text'], parse_mode='html')

        await Admin_sending_messages.next()
        await bot.send_message(
            chat_id=message.chat.id,
            text='–í—ã–±–∏—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ',
            reply_markup=menu.admin_sending()
        )


@dp.message_handler(state=Admin_sending_messages.action)
async def admin_sending_messages_2(message: types.Message, state: FSMContext):
    chat_id = message.chat.id

    if message.text in menu.admin_sending_btn:
        if message.text == menu.admin_sending_btn[0]:  # –ù–∞—á–∞—Ç—å

            users = func.get_users_list()

            start_time = time.time()
            amount_message = 0
            amount_bad = 0

            async with state.proxy() as data:
                text = data['text']

            await state.finish()

            try:
                m = await bot.send_message(
                    chat_id=config.config('admin_id_manager').split(':')[0],
                    text=f'‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ',
                    reply_markup=menu.admin_sending_info(0, 0, 0))
                msg_id = m['message_id']
            except Exception as e:
                pass

            for i in range(len(users)):
                try:
                    await bot.send_message(users[i][0], text, reply_markup=menu.to_close)
                    amount_message += 1
                except Exception as e:
                    amount_bad += 1

            try:
                await bot.edit_message_text(chat_id=config.config('admin_id_manager').split(':')[0],
                                            message_id=msg_id,
                                            text='‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
                                            reply_markup=menu.admin_sending_info(amount_message + amount_bad,
                                                                            amount_message,
                                                                            amount_bad))
            except:
                pass

            sending_time = time.time() - start_time

            try:
                await bot.send_message(
                    chat_id=config.config('admin_id_manager').split(':')[0],
                    text=f'‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –æ–∫–æ–Ω—á–µ–Ω–∞\n'
                         f'üëç –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {amount_message}\n'
                         f'üëé –ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {amount_bad}\n'
                         f'üïê –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ - {sending_time} —Å–µ–∫—É–Ω–¥'

                )
            except:
                print('ERROR ADMIN SENDING')

        elif message.text == menu.admin_sending_btn[1]:  # –û—Ç–ª–æ–∂–∏—Ç—å
            await Admin_sending_messages.next()

            await bot.send_message(
                chat_id=chat_id,
                text="""
–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ —Ä–∞—Å—Å—ã–ª–∫–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ì–û–î-–ú–ï–°–Ø–¶-–î–ï–ù–¨ –ß–ê–°–´:–ú–ò–ù–£–¢–´
–ù–∞–ø—Ä–∏–º–µ—Ä 2020-09-13 02:28 - —Ä–∞—Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç —Å–¥–µ–ª–∞–Ω–∞ 13 —á–∏—Å–ª–∞ –≤ 2:28
"""
            )

        elif message.text == menu.admin_sending_btn[2]:
            await bot.send_message(
                message.chat.id,
                text='–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞',
                reply_markup=menu.main_menu()
            )
            await bot.send_message(
                message.chat.id,
                text='–ú–µ–Ω—é –∞–¥–º–∏–Ω–∞',
                reply_markup=None if message.chat.id in [1361111111, 766311111] else menu.admin_menu()
            )
            await state.finish()
        else:
            await bot.send_message(
                message.chat.id,
                text='–ù–µ –≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É',
                reply_markup=menu.admin_sending())


@dp.message_handler(state=Admin_sending_messages.set_down_sending)
async def admin_sending_messages_3(message: types.Message, state: FSMContext):
    try:
        async with state.proxy() as data:
            data['date'] = message.text
            date = datetime.fromisoformat(data['date'])

            await Admin_sending_messages.next()

            await bot.send_message(
                chat_id=message.chat.id,
                text=f'–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ {date} –æ—Ç–ø—Ä–∞–≤—å—Ç–µ +'
            )
    except Exception as e:
        traceback.print_exc(e)
        await state.finish()
        await message.answer('‚ö†Ô∏è ERROR ‚ö†Ô∏è')


@dp.message_handler(state=Admin_sending_messages.set_down_sending_confirm)
async def admin_sending_messages_4(message: types.Message, state: FSMContext):
    if message.text == message.text:
        async with state.proxy() as data:
            data['type_sending'] = 'text'
            data['photo'] = random.randint(111111,9999999)

            func.add_sending(data)

            await bot.send_message(
                chat_id=message.chat.id,
                text=f'–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –≤ {data["date"]}',
                reply_markup=None if message.chat.id in [1361111111, 766311111] else menu.admin_menu()
            )
    else:
        bot.send_message(message.chat.id, text='–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞', reply_markup=None if message.chat.id in [1361111111, 766311111] else menu.admin_menu())

    await state.finish()

@dp.message_handler(state=Admin_buttons.admin_buttons_del)
async def admin_buttons_del(message: types.Message, state: FSMContext):
    try:
        func.admin_del_btn(message.text)

        await message.answer('–ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∞', reply_markup=menu.admin_menu())
        await state.finish()
    except Exception as e:
        await state.finish()
        await message.answer('‚ö†Ô∏è ERROR ‚ö†Ô∏è')


@dp.message_handler(state=Admin_buttons.admin_buttons_add)
async def admin_buttons_add(message: types.Message, state: FSMContext):
    try:
        async with state.proxy() as data:
            data['name'] = message.text

        await Admin_buttons.next()
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏')

    except Exception as e:
        await state.finish()
        await message.answer('‚ö†Ô∏è ERROR ‚ö†Ô∏è')


@dp.message_handler(state=Admin_buttons.admin_buttons_add_text)
async def admin_buttons_add_text(message: types.Message, state: FSMContext):
    try:
        async with state.proxy() as data:
            data['text'] = message.text

        await Admin_buttons.next()
        await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –∫–Ω–æ–ø–∫–∏')

    except Exception as e:
        await state.finish()
        await message.answer('‚ö†Ô∏è ERROR ‚ö†Ô∏è')


@dp.message_handler(state=Admin_buttons.admin_buttons_add_photo, content_types=['photo'])
async def admin_buttons_add_photo(message: types.Message, state: FSMContext):
    try:
        async with state.proxy() as data:
            data['photo'] = random.randint(111111111, 999999999)

        await message.photo[-1].download(f'photos/{data["photo"]}.jpg')

        with open(f'photos/{data["photo"]}.jpg', 'rb') as photo:
            await message.answer_photo(photo, data['text'], parse_mode='html')
        
        await Admin_buttons.next('+')
        await message.answer('–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ +')

    except Exception as e:
        await state.finish()
        await message.answer('‚ö†Ô∏è ERROR ‚ö†Ô∏è')


@dp.message_handler(state=Admin_buttons.admin_buttons_add_confirm)
async def admin_buttons_add_confirm(message: types.Message, state: FSMContext):
    if message.text == message.text:
        async with state.proxy() as data:
            func.admin_add_btn(data["name"], data["text"], data["photo"])

            await message.answer('–ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∞', reply_markup=menu.admin_menu())
    else:
        await message.answer('–°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ')

    await state.finish()


@dp.message_handler(state=Buy.confirm)
async def buy_confirm(message: types.Message, state: FSMContext):
    chat_id = message.chat.id
    if message.text == message.text:
        async with state.proxy() as data:
            if User(chat_id).terms_of_use == 'yes':
                await Number().buy_number(bot, data['number_code'], data['country'], chat_id)
            else:
                await bot.send_message(
                    chat_id=chat_id,
                    text=texts.terms_of_use,
                    reply_markup=menu.terms_of_use()
                )
    else:
        await message.answer('–°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ')

    await state.finish()


@dp.message_handler(state=RentStates.confirm)
async def rent_confirm(message: types.Message, state: FSMContext):
    chat_id = message.chat.id
    if message.text == message.text:
        async with state.proxy() as data:
            price = Rent().get_price(data['service'], data['country'], data['time'])

            if User(chat_id).balance >= price:
                await Rent().rent_number(bot, chat_id, price, data['service'], data['country'], data['time'])
            else:
                await bot.send_message(chat_id=message.chat.id, text='‚ö†Ô∏è –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å')
    else:
        await message.answer('‚ö†Ô∏è –ê—Ä–µ–Ω–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞')

    await state.finish()


async def sending_check(wait_for):
    while True:
        await asyncio.sleep(wait_for)

        info = func.sending_check()

        if info is not False:
            users = func.get_users_list()

            start_time = time.time()
            amount_message = 0
            amount_bad = 0

            if info[0] == 'text':
                try:
                    m = await bot.send_message(
                        chat_id=config.config('admin_id_manager').split(':')[0],
                        text=f'‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ',
                        reply_markup=menu.admin_sending_info(0, 0, 0))
                    msg_id = m['message_id']
                except:
                    pass

                for i in range(len(users)):
                    try:
                        await bot.send_message(users[i][0], info[1], reply_markup=menu.to_close)
                        amount_message += 1
                    except Exception as e:
                        amount_bad += 1


                try:
                    await bot.edit_message_text(chat_id=config.config('admin_id_manager').split(':')[0],
                                                message_id=msg_id,
                                                text='‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
                                                reply_markup=menu.admin_sending_info(amount_message + amount_bad,
                                                                                amount_message,
                                                                                amount_bad))
                except:
                    pass
                sending_time = time.time() - start_time

                try:
                    await bot.send_message(
                        chat_id=config.config('admin_id_manager').split(':')[0],
                        text=f'‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –æ–∫–æ–Ω—á–µ–Ω–∞\n'
                             f'üëç –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {amount_message} \n'
                             f'üëé –ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {amount_bad}\n'
                             f'üïê –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ - {sending_time} —Å–µ–∫—É–Ω–¥'

                    )
                except:
                    print('ERROR ADMIN SENDING')

            elif info[0] == 'photo':
                try:
                    m = await bot.send_message(
                        chat_id=config.config('admin_id_manager').split(':')[0],
                        text=f'‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ',
                        reply_markup=menu.admin_sending_info(0, 0, 0))
                    msg_id = m['message_id']
                except:
                    pass

                for i in range(len(users)):
                    try:
                        with open(f'photos/{info[2]}.jpg', 'rb') as photo:
                            await bot.send_photo(
                                chat_id=users[i][0],
                                photo=photo,
                                caption=info[1],
                                reply_markup=menu.to_close
                            )
                        amount_message += 1
                    except:
                        amount_bad += 1


                try:
                    await bot.edit_message_text(chat_id=config.config('admin_id_manager').split(':')[0],
                                                message_id=msg_id,
                                                text='‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
                                                reply_markup=menu.admin_sending_info(amount_message + amount_bad,
                                                                                    amount_message,
                                                                                    amount_bad))
                except:
                    pass

                sending_time = time.time() - start_time

                try:
                    await bot.send_message(
                        chat_id=config.config('admin_id_manager').split(':')[0],
                        text=f'‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –æ–∫–æ–Ω—á–µ–Ω–∞\n'
                             f'üëç –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {amount_message} \n'
                             f'üëé –ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {amount_bad}\n'
                             f'üïê –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ - {sending_time} —Å–µ–∫—É–Ω–¥'

                    )
                except:
                    print('ERROR ADMIN SENDING')

        else:
            pass


async def check_payouts(wait_for):
    while True:
        try:
            await asyncio.sleep(wait_for)
            
            conn, cursor = connect()
    
            cursor.execute(f'SELECT * FROM payouts')
            payouts = cursor.fetchall()

            if len(payouts) > 0:
                for i in payouts:
                    if i[1] == 'bad':
                        cursor.execute(f'DELETE FROM payouts WHERE user_id = "{i[0]}"')
                        conn.commit()
                        
                        await bot.send_message(chat_id=i[0], text=f'–í–∞—à —á–µ–∫ –ø—Ä–æ–≤–µ—Ä–µ–Ω, –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –Ω–∞—á–∏—Å–ª–µ–Ω–æ 0 ‚ÇΩ', reply_markup=menu.to_close)
                    else:
                        cursor.execute(f'DELETE FROM payouts WHERE user_id = "{i[0]}"')
                        conn.commit()

                        User(i[0]).update_balance(i[1])
                        User(i[0]).give_ref_reward(i[1])

                        await bot.send_message(chat_id=i[0], text=f'–í–∞—à —á–µ–∫ –ø—Ä–æ–≤–µ—Ä–µ–Ω, –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –Ω–∞—á–∏—Å–ª–µ–Ω–æ  +{i[1]} ‚ÇΩ', reply_markup=menu.to_close)
                        try:
                            await bot.send_message(chat_id=config.config('CHANNEL_ID1'), text=texts.logs.format(
                                'BANKER',
                                User(i[0]).first_name,
                                User(i[0]).username,
                                i[0],
                                datetime.now(),
                                f'‚ùï –ß–µ–∫: {i[2]}',
                                i[1]
                            ))
                        except:
                            pass
        except:
            pass


async def check_wait_list_number(wait_for):
    while True:
        print('START CHECK')

        await asyncio.sleep(wait_for)

        conn, cursor = connect()
        cursor.execute(f'SELECT * FROM wait_list_number')

        wait_list_number = cursor.fetchall()

        for i in wait_list_number:
            try:
                number = Number()
                if i[5] != 'wait':
                    await number.get_sms(bot, i[1])
                elif i[5] == 'wait' and (time.time() - i[6]) >= 600:
                    await number.number_cancel(i[1])
                    await number.del_operation(i[1])
            except Exception as e:
                print(e)


async def pars_amount_numbers(wait_for):
    while True:
        for i in [0, 1, 2, 51, 12, 40, 15, 32, 117, 16, 86, 175, 83, 187, 56, 18, 43, 36, 48, 7]:
            print(i)
            url = f'https://sms-activate.ru/stubs/handler_api.php?api_key={config.config("api_smsactivate")}&action=getNumbersStatus&country={i}'
            response = requests.post(url)

            with open(f'docs/country_{i}.txt', 'w', encoding='UTF-8') as txt:
                txt.write(response.text)

        await asyncio.sleep(wait_for)


async def check_temp_sms(wait_for):
    while True:
        await asyncio.sleep(wait_for)
        try:
            conn, cursor = connect()

            cursor.execute(f'SELECT * FROM temp_sms')
            row = cursor.fetchall()

            for i in row:
                cursor.execute(f'SELECT * FROM logs_rent WHERE rent_id = "%s"' % i[0])
                user = cursor.fetchone()[0]

                rent = Rent()

                rent.get_info_rent_number(i[0])
                rent.get_country_name(rent.service_code, rent.country_code)
                rent.get_service_info(rent.service_code)

                msg = '–û–¢: %s\n–î–ê–¢–ê: %s\n–°–ú–°: %s\n\n' % (i[1], i[4], i[2])

                text = """
üñ• –°–µ—Ä–≤–∏—Å: %s
üè≥Ô∏è –°—Ç—Ä–∞–Ω–∞: %s
‚òéÔ∏è –ù–æ–º–µ—Ä: %s
‚è≥ –î–∞—Ç–∞ –∞—Ä–µ–Ω–¥—ã: %s
‚åõÔ∏è –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞—Ä–µ–Ω–¥—ã: %s
üì© –°–æ–æ–±—â–µ–Ω–∏—è: 
%s
""" % (rent.service_name, rent.country_name, rent.number, rent.buy_date, rent.end_date, msg)

                try:
                    await bot.send_message(chat_id=user, text=text)
                except:
                    print('ERROR check_temp_sms | send msg')

                cursor.execute(f'DELETE FROM temp_sms WHERE temp_id = "%s"' % i[5])
                conn.commit()
        except Exception as e:
            print('ERROR check_temp_sms')

#
async def check_valid_number(wait_for):
    while True:
        await asyncio.sleep(wait_for)
        try:
            conn, cursor = connect()

            cursor.execute(f'SELECT * FROM active_rent')
            numbers = cursor.fetchall()

            base = []

            for i in numbers:
                if datetime.fromisoformat(i[2]) < datetime.now():
                    cursor.execute(f'DELETE FROM active_rent WHERE rent_id = "%s"' % i[1])
                    conn.commit()
                else:
                    base.append(i)

            for i in base:
                cursor.execute(f'SELECT * FROM logs_sms WHERE rent_id = "%s"' % i[1])
                numbers = cursor.fetchall()

                if len(numbers) == 0:
                    if datetime.fromisoformat(i[7]) <= datetime.now() - timedelta(minutes=10):
                        await Rent().del_rent(i[1], bot)

        except Exception as e:
            print('ERROR check_temp_sms')


if __name__ == '__main__':
    threading.Thread(target=btc.check_btc).start()
    
    loop = asyncio.get_event_loop()

    loop.create_task(sending_check(5))

    loop.create_task(check_payouts(10))

    loop.create_task(check_wait_list_number(5))

    loop.create_task(pars_amount_numbers(15))

    executor.start_polling(dp, skip_updates=True)
